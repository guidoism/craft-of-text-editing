#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="plaintexcss.css" />

This is a text editor in the style of Emacs. It has been written
from scratch in a literate form with help from Craig A. Finseth's
book [[https://www.finseth.com/craft/][The Craft of Text Editing --or-- Emacs for the Modern World]].

Our motivation is to be able to learn how a actually-usable non-toy
text editor works by reading the source code and commentary in a
narrative fashion. At certain points along the way we will have a
working editor that can be tangled, compiled, and run. Over time
certain parts will be enhanced or replaced with something more
advanced. The intent is for the reader take a bit at a time and not
forced to choose between either grokking whole complexity all at one
or seeing non-working toy parts.

We will start with a discussion and definition of buffers as this is a
foundational concept in Emacs. We will turn this simple buffer into an
editor by adding: 1. The ability to add a character to the buffer one
at a time, 2. The ability to transform the buffer into something that
can be seen, and 3. The ability to read in input from the user.

Next we will turn out editor into something that takes control of the
whole screen by using [[https://github.com/floooh/sokol][Sokol]] to provide cross-platform access to the
graphical display subsystems of our operating system.

At this point we know have full control over our display so we can
add the following features:

- Typeset characters in their proper place
- Add a status bar to the bottom
- Make a cursor

** Buffers

Everything is a buffer. That statement is not quite true, but it's
true enough. Files that we edit are loading into a buffer. When we
start a new file we start with an empty buffer and later bind it to
and save it to a file. Commands are typed into a (mini-) buffer.
Background status is stored in buffers. This is the magic that makes
Emacs so hackable.

A text file is a one-dimensional representation of a two-dimensional
document. For example, newlines are control characters that describe
how to convert the file into the 2d plane of glyphs.

This is an important point to remember. There's nothing sacred about
drawing one character at a time, from left to right, and when we get
to the right of the display wrapping to the next line by moving down
the glyph height and starting again at the far left and doing the
same when we reach a newline character instead of drawing it.

Painting a sequence of glyphs across the screen in a zig-zag is pretty
universal for text, but the direction you move isn't.

In fact, we will almost certainly want to visualize a sequence of
characters in different ways. For example: wrapping long lines vs
truncation.

And this brings up another difference, do we want the cursor to move
around the screen without any regard to the structure of the text
under it or does "move up" for example really mean move to the
previous line at the same column offset? And what happens if the
previous line is too short and doesn't have that column? And what
happens if you keep moving up and encounter another line that /is/
long enough? 

Mentally de-coupling the sequence of characters in a buffer with the
visualization opens up other potential improvements. Maybe we can also
display a PDF as either the textual format or as the drawn document
the author intended. Or we could constrain code files to always be
syntactically correct.

*** Buffer Representation

The choice of data structure for a buffer of text is dependent several
factors most notably how much text, whether it is full of many short
lines or few long lines, and whether it will be mostly just read or is
under active editing.

We recognized that we don't have to use the same data structure for
all active buffer nor even the same data structure for the buffer over
its lifetime.

**** Gap Buffers

In the actual implementation they use Gap Buffers. A buffer
initial starts off all gap, the first part is 0 length at
the beginning and the second part is 0 length at the end.

**** Naïve Buffer

Before we implement the more complex gap buffer we will
implement the most naïve form of buffer. Just a flat piece
of memory that comes from malloc. We move everything after
the insertion point with ~memmove~ during each edit.

#+name: buffer_representation
#+begin_src c
typedef struct Buffer {
  BufferId id;
  String name;
  u8* contents;
  u64 length;
  u64 point;
  // Mark mark; no need to this quite yet
  
} Buffer;

Buffer buffers[64];
u16 buffers_len;
BufferId current_buffer_id;
#+end_src

*** Create a new buffer

#+name: create_buffer
#+begin_src c
Status create_buffer(String name) {
  for (int i = 0; i < buffers_len; i++) {
    if (memcmp(buffers[i].name.s, name.s, name.len) == 0) {
      return Failure;
    }
  }
  int i = buffers_len++;
  Buffer * b = &buffers[i];
  b->id = i;
  b->name = name;
  b->contents = malloc(100);
  return Success;
}

Status set_current_buffer(String name) {
  for (int i = 0; i < buffers_len; i++) {
    if (memcmp(buffers[i].name.s, name.s, name.len) == 0) {
      current_buffer_id = i;
    }
  }
  return Failure;
}
#+end_src

*** Insert a character

Insert the character that has been typed.

The universal argument is assumed to be the number of times to repeat
the character being inserted.

#+name: insert_char
#+begin_src c
Status insert_char(u32 ch) {
  u8 * b = buffers[current_buffer_id].contents;
  u64 loc = buffers[current_buffer_id].point;
  printf("Inserting %d to location %llu\n", ch, loc);
  u8 enc[4];
  u8 n = to_utf8(enc, ch);
  if (n == 0) return NotUnicode;
  memmove(b+loc+n, b+loc, n);
  memcpy(b+loc, enc, n);
  buffers[current_buffer_id].point++;
  buffers[current_buffer_id].length += n;
  return Success;
}
#+end_src

** Events

Now we move on to the human scale. This is where we react to keys
being pressed or being told that we need to re-draw the display.

*** Initialize Everything

#+name: init
#+begin_src c :noweb yes
static void init(void) {
  create_buffer(str("*scratch*"));
  set_current_buffer(str("*scratch*"));

  state.dpi_scale = sapp_dpi_scale();
  sg_setup(&(sg_desc){.context = sapp_sgcontext(), .logger.func = slog_func});
  __dbgui_setup(sapp_sample_count());
  sgl_setup(&(sgl_desc_t){.logger.func = slog_func});

  // make sure the fontstash atlas width/height is pow-2
  const int atlas_dim = round_pow2(512.0f * state.dpi_scale);
  state.fons = sfons_create(&(sfons_desc_t){.width = atlas_dim, .height = atlas_dim});
  state.font_mono = FONS_INVALID;
  state.font_normal = FONS_INVALID;

  <<load_fonts>>
}

#+end_src

*** Load Fonts

#+name: load_fonts
#+begin_src c
  sfetch_setup(&(sfetch_desc_t){
      .num_channels = 1,
      .num_lanes = 4,
      .logger.func = slog_func,
  });
  sfetch_send(&(sfetch_request_t){
      .path = "/Users/guido/Library/Fonts/MinionPro-Regular.otf",
      .callback = font_normal_loaded,
      .buffer = SFETCH_RANGE(state.font_normal_data),
  });
  sfetch_send(&(sfetch_request_t){
      .path = "/Users/guido/Library/Fonts/Hack Regular Nerd Font Complete.ttf",
      .callback = font_mono_loaded,
      .buffer = SFETCH_RANGE(state.font_mono_data),
  });
#+end_src


#+name: save_font_data
#+begin_src c
void font_mono_loaded(const sfetch_response_t* response) {
  printf("Loading mono\n");
  if (response->fetched) {
    printf("Loaded mono\n");
    state.font_mono = fonsAddFontMem(state.fons, "mono", (void*)response->data.ptr, (int)response->data.size,  false);
  }
  else if (response->failed) {
    printf("Loading mono failed: %d\n", response->error_code);
  }
}

void font_normal_loaded(const sfetch_response_t* response) {
  printf("Loading normal\n");
  if (response->fetched) {
    printf("Loaded normal\n");
    state.font_normal = fonsAddFontMem(state.fons, "sans", (void*)response->data.ptr, (int)response->data.size,  false);
  }
}
#+end_src


*** Handle Event

This is what happens when something like a key is pressed or the
window is re-sized.

#+name: handle_event
#+begin_src c
void handle_event(const sapp_event* event) {
  // SAPP_EVENTTYPE_KEY_DOWN
  // SAPP_EVENTTYPE_KEY_UP
  if (event->type == SAPP_EVENTTYPE_CHAR) {
    insert_char(event->char_code);
    // bool key_repeat;
    // uint32_t modifiers;
  }
}
#+end_src

** Display

*** Typeset Buffer

This is where we translate the one-dimensional buffer into our
two-dimensional display. In anticipation of the later addition of
"windows" we will provide the ability to typeset a buffer into any
size. We will go ahead an call the display a window for now. In fact,
it makes sense to think of a window as a view into the buffer. You
aren't necessarily going to see the whole thing.

If the buffer typesets into something smaller than the window then our
job is very easy. It gets more complicated when we have to figure out
where to place the point and then determine how far back to start
from.

Let's try to describe the typesetting algorithm for a large buffer
and then see if that also solves our simple case.

The point is obviously kept as part as an index into the buffer. It's
also something visual, a cursor that has a location in the window.
This relationship must be the heart of our algorithm. Let's start
by defining our Window type.

#+name: window
#+begin_src c :noweb yes
typedef struct Window {
  u16_pair size_in_pixels;  // in pixels
  u16_pair size_in_chars;   // in characters
  u16_pair cursor_location; // in characters
  <<window_additions>>
} Window;
#+end_src

Now we need to determine which location in the buffer represents the
first character of the first line in our window. The naïve approach is
what we will do first. Let's just typeset everything from the
beginning of the buffer until our current location. Actually, it's
simpler than that. We just need to keep track of the locations in the
buffer that represent the beginnings of lines.

- [ ] TODO: It would be cool to be able to show the outside of the buffer struct sorta dimed giving the new code here some context
- [ ] TODO: We should also allow you to click on a snippet and see it all merged together

#+name: buffer_additions
#+begin_src c
u64 line_count;
u64 * line_starts;
#+end_src

#+name: create_buffer_additions
#+begin_src c
b->line_starts = malloc(4096*sizeof(u64));
#+end_src

#+name: calculate_line_starts
#+begin_src c
for (u64 i = 0; i < b->length; i++) {
  
}
#+end_src



*** Display State
#+name: display_state
#+begin_src c
typedef struct {
  FONScontext* fons;
  float dpi_scale;
  int font_mono;
  int font_normal;
  uint8_t font_mono_data[16 * 256 * 1024];
  uint8_t font_normal_data[256 * 1024];
} state_t;
static state_t state;
#+end_src

*** Draw Frame

#+name: draw_frame
#+begin_src c
static void draw_frame(void) {
  const char * str = (const char *)buffers[current_buffer_id].contents;
  const float dpis = state.dpi_scale;

  // pump sokol_fetch message queues (GUIDO: why?)
  sfetch_dowork();

  float sx, sy, dx, dy, lh = 0.0f;
  uint32_t white = sfons_rgba(255, 255, 255, 255);
  fonsClearState(state.fons);

  sgl_defaults();
  sgl_matrix_mode_projection();
  sgl_ortho(0.0f, sapp_widthf(), sapp_heightf(), 0.0f, -1.0f, +1.0f);

  sx = 50*dpis; sy = 50*dpis;
  dx = sx; dy = sy;

  FONScontext* fs = state.fons;
  fonsSetFont(fs, state.font_normal);
  fonsSetSize(fs, 124.0f*dpis);
  fonsVertMetrics(fs, NULL, NULL, &lh);
  dx = sx;
  dy += lh;
  fonsSetColor(fs, white);
  dx = fonsDrawText(fs, dx, dy, str, NULL);

  // Draw status line
  line(0, sapp_heightf()-100, sapp_widthf(), sapp_heightf()-100);
  fonsSetFont(fs, state.font_mono);
  fonsSetSize(fs, 48.0f*dpis);
  dx = fonsDrawText(fs, 0, sapp_heightf()-24, "U:**-  *scratch*  0% (0,0)", NULL);
  
  // flush fontstash's font atlas to sokol-gfx texture
  sfons_flush(fs);

  // render pass
  sg_begin_default_pass(&(sg_pass_action){
      .colors[0] = {
        .action = SG_ACTION_CLEAR, .value = { 0.3f, 0.3f, 0.32f, 1.0f }
      }
    }, sapp_width(), sapp_height());
  sgl_draw();
  __dbgui_draw();
  sg_end_pass();
  sg_commit();
}
#+end_src


** TextMode vs Graphics

Using Sokol, to build:

#+begin_src sh
clang build/third-sokol.c experiments/sokol.m -o build/third-sokol -DSOKOL_METAL -fobjc-arc -Iexperiments/ -framework Metal -framework Cocoa -framework MetalKit -framework Quartz -framework AudioToolbox && build/third-sokol 
#+end_src

#+name: sokolmain
#+begin_src c :tangle build/third-sokol.c :noweb yes
#include "sokol_app.h"
#include "sokol_gfx.h"
#include "sokol_fetch.h"
#include "sokol_log.h"
#include "sokol_glue.h"
#define SOKOL_GL_IMPL
#include "sokol_gl.h"
#include <stdio.h>  // needed by fontstash's IO functions even though they are not used
#define FONTSTASH_IMPLEMENTATION
#if defined(_MSC_VER )
#pragma warning(disable:4996)   // strncpy use in fontstash.h
#endif
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wsign-conversion"
#endif
#include "fontstash/fontstash.h"
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
#define SOKOL_FONTSTASH_IMPL
#include "sokol_fontstash.h"
#include "dbgui/dbgui.h"

#include <stdint.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
typedef int64_t i64;
typedef uint64_t u64;
typedef uint8_t Status;
typedef uint16_t BufferId;
//typedef char[8] Slug; // a short string (≤ 8 bytes)

enum {Success,Failure,NotUnicode};

<<unicode_helpers>>
<<buffer_representation>>
<<create_buffer>>
<<insert_char>>
<<handle_event>>
<<display_state>>
<<save_font_data>>

/* round to next power of 2 (see bit-twiddling-hacks) */
int round_pow2(float v) {
    uint32_t vi = ((uint32_t) v) - 1;
    for (uint32_t i = 0; i < 5; i++) {
        vi |= (vi >> (1<<i));
    }
    return (int) (vi + 1);
}

void line(float sx, float sy, float ex, float ey)
{
  sgl_begin_lines();
  sgl_c4b(255, 255, 255, 128);
  sgl_v2f(sx, sy);
  sgl_v2f(ex, ey);
  sgl_end();
}

<<init>>
<<draw_frame>>

void cleanup(void) {
  __dbgui_shutdown();
  sfetch_shutdown();
  sfons_destroy(state.fons);
  sgl_shutdown();
  sg_shutdown();
}

sapp_desc sokol_main(int argc, char* argv[]) {
  (void)argc;
  (void)argv;
  return (sapp_desc) {
    .init_cb = init,
    .frame_cb = draw_frame,
    .cleanup_cb = cleanup,
    .event_cb = handle_event, // Or use .event_cb = __dbgui_event,
    .width = 800,
    .height = 600,
    .high_dpi = true,
    .gl_force_gles2 = true,
    .window_title = "fontstash",
    .icon.sokol_default = true,
    .logger.func = slog_func,
  };
}
#+end_src

*** Unicode Helpers

#+name: unicode_helpers
#+begin_src c
typedef struct String { u8 len; u8 s[64]; } String;
String str(const char * x) {
  // TODO: assert string length
  String y = {.len=sizeof(x)};
  memcpy(y.s, x, y.len);
  return y;
}

u8 to_utf8(u8 * buf, u32 ch)
{
    if (ch <= 0x7F) {
        buf[0] = ch;
        return 1;
    }
    if (ch <= 0x7FF) {
        buf[0] = 0xC0 | (ch >> 6);            /* 110xxxxx */
        buf[1] = 0x80 | (ch & 0x3F);          /* 10xxxxxx */
        return 2;
    }
    if (ch <= 0xFFFF) {
        buf[0] = 0xE0 | (ch >> 12);           /* 1110xxxx */
        buf[1] = 0x80 | ((ch >> 6) & 0x3F);   /* 10xxxxxx */
        buf[2] = 0x80 | (ch & 0x3F);          /* 10xxxxxx */
        return 3;
    }
    if (ch <= 0x10FFFF) {
        buf[0] = 0xF0 | (ch >> 18);           /* 11110xxx */
        buf[1] = 0x80 | ((ch >> 12) & 0x3F);  /* 10xxxxxx */
        buf[2] = 0x80 | ((ch >> 6) & 0x3F);   /* 10xxxxxx */
        buf[3] = 0x80 | (ch & 0x3F);          /* 10xxxxxx */
        return 4;
    }
    return 0;
}
#+end_src


** Extensions
*** Lisp Nodes

The classic C implementation of a Lisp node is an implicit tagged
union of the native word size where the lower 3 bits of a pointer tag
the data that it points to and structs in the array-of-structs style.

The modern style is for a struct-of-arrays where we have large
contiguous swaths of identially typed data. We are going to assume a
64 bit native word size here for simplicity. I can think of no good
reason to make this program optimized for other word sizes. If it is
then the hypothetical 32-bit word size advocate is encouraged to fork
this codebase.

A block of 64 cells (4096 bytes) is a natural point of segmentation.
This allows flags for all 64 cells to each fit into a single 64 bit
word.

#+begin_src c
typedef struct Cons {
  u32 car;
  u32 cde;
} Cons;

typedef struct Cell {
  union {
    i64  n;
    u32  c; // unicode codepoint
    //Slug s;
    Cons p;
  } 
} Cell;

enum Tag {Number, Character, Slug, ConsPair};

Tag  tags[4096];
Cell cells[4096];
#+end_src

** Stupid Ideas

- Maybe a slug should store 7 bit ascii chars and use the remaining
  bits for length?
- When loading a file we can write out the text pretty quickly into a
  block of cells and then write out the car/cdr parts in a different
  part of the block all at once.

** Questions

- How many ms does it take to redisplay the whole display? Is it less
  than an incremental approach on a modern computer?
